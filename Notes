Mistakes with current design:
1)  It is better to make the test cases using variables to be able to change it automatically instead of having to change them one per each file. Avoid hard coding.
2)  It is better to make the test cases atomic where they are not relying on other test cases to run first.

============================================================================================================================================================================

1)  We can solve the hard coding issue using the POJO class.
2)  We can use the JSONProperty annotation for names of keys that have "_" and manage the name of the variable to match the naming conventions.
3)  Build a constructor for the POJO classes.
4)  We can use the following annotation in the POJO classes to avoid sending NULL keys in the request: @JsonInclude(JsonInclude.Include.NON_NULL)
5)  Boolean variables have a default false value which means it will be sent by the jackson in the request even if you don't want to send it.
    To solve it:     @JsonInclude(JsonInclude.Include.NON_DEFAULT) On the variable level
    However, this will cause an issue with sending a default value.
    To solve it:    Use Boolean data type and not the JSONInclude.
    This also applies for integers.

6) We can make an assertion statically for better readability of the assertions.

===================================================================================
How to deserialize the JSON response to avoid hardcoding the assertions:

1)  We use the following:   User returnedUser = response.body().as(User.class);
2) TO deserialize the error message, It is better to build a POJO class for the error message
3) We will solve the issue of getting a parameter that is not initially sent in the request without hardcoding it.

==================================================================================
For a better framework build, we add the API requests in a separate class in a different package

1) We create methods for the given() when() and then() and call these methods from the test cases.

======================================================================================
For test cases that rely on previous steps, we can create steps package for it.

1) We can use the faker dependancy to generate user names and passwords.
2) Check for the implementation done for the code here.

======================================================================================
1) It is better to generate a route class for the URLs.
======================================================================================
Build a class for the error message instead of hard coding them.
======================================================================================
Build a request specification
It includes the base URI and the content type
We can also add headers from here
======================================================================================
We can run the tests from Maven Command Line
Maven detects all test files ending in "test"
mvn clean test
======================================================================================
We can add the surefire plugin to run the tests in parallel making it faster
======================================================================================
We can run properties to through maven project using the -Denv=value
We will use then the function called System.getProperty("env")
